const session = require('express-session');
const express = require('express');
const operations = require('../operations');
const router = express.Router()
module.exports = router

router.post('/', async (req, res) => {  
    var usuario = req.session.user;
    var body = req.body;
    if (usuario) {
        switch (parseInt(body.op)) {
            case 1:// LISTA DE TODOS LOS USUARIOS REGISTRADOS.
                const data_users = await new Promise((resolve, reject) => {
                    sql = `SELECT us.idUser, CONCAT(us.nombre,' ',us.apellido) AS nombre_completo, ta.nombre as tipo_usuario, us.userName, us.correo, us.telefono, us.direccion, us.fkTipoUsuario AS tp_user, (CASE WHEN estado = 1 THEN 'Activo' ELSE 'Inactivo' END) AS estado, recuperar FROM Usuario as us JOIN TipoUsuario AS ta ON ta.idTipoUsuario = us.fkTipoUsuario WHERE us.idUser NOT IN (?);`;
                    operations.executeQuery(sql, [usuario.id], (result) => {
                        resolve(result);
                    });
                });
                res.send(data_users);
            break;
            case 2://CAMBIO DE ESTADO DEL USUARIO
                var user_id = body.user_id;
                var estado = body.estado;
                const change_state = await new Promise((resolve, reject) => {
                    sql = `UPDATE Usuario SET estado = ? WHERE idUser = ?`;
                    operations.executeQuery(sql, [estado, user_id], (result) => {
                        resolve(result.affectedRows > 0);
                    });
                });
                res.send({check: change_state});
            break;
            case 3://CAMBIO DE ROL DE USUARIO
                var user_id = body.user_id;
                var rol = body.rol;
                const change_rol = await new Promise((resolve, reject) => {
                    sql = `UPDATE Usuario SET fkTipoUsuario = ? WHERE idUser = ?`;
                    operations.executeQuery(sql, [rol, user_id], (result) => {
                        resolve(result.affectedRows > 0);
                    });
                });
                res.send({check: change_rol});
            break;
            case 4://REINCIO DE CONTRASEÃ‘A
                const plaintextPassword = body.dataPassword.first_password;
                var user_id = body.user_id;
                // Generar un salt (un valor aleatorio)
                const passwordSalt = operations.bcrypt.genSaltSync(10);
                // Hash de la contraseÃ±a con el salt
                const passwordHash = operations.bcrypt.hashSync(plaintextPassword, passwordSalt);
                sql = "UPDATE usuario SET passwordHash = ?, recuperar = ? WHERE idUser = ?;";
                values = [passwordHash, 0, user_id];
                operations.executeQuery(sql, values, (result) =>{ 
                    res.send({check: result.affectedRows > 0});
                });
            break;
        }
    }
});