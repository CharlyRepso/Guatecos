const session = require('express-session');
const express = require('express');
const operations = require('../operations');
const router = express.Router();
module.exports = router

router.post('/', async (req, res) => {
    var usuario = req.session.user;
    var op = req.body.op;
    if (usuario) {
        switch (parseInt(op)) {
            case 1: //INFORMACION GENERAL DE TODOS LOS ARTICULOS CONSIGNADOS.
                const data_art = await new Promise((resolve, reject) => {
                    sql = 'SELECT em.idEmpeno, ar.idArticulo, em.titulo, em.descripcion, em.valorEmpeo, ta.descripcion AS tipo FROM empeno AS em JOIN articulo AS ar ON em.fkArticulo = ar.idArticulo JOIN tipoarticulo AS ta ON ta.idTipoArticulo = ar.fkTipoArticulo WHERE ar.fkEstadoArticulo = ?';
                    operations.executeQuery(sql, [4], (result) => {
                        resolve(result);
                    });
                });

                const data_sale = await new Promise((resolve, reject) => {
                    sql = 'SELECT ve.idVenta, ve.fkArticulo AS idArticulo, ve.titulo, ve.descripcion, es.idEstado, DATE(ve.fechaPublicacion) AS fecha, ve.precio,  nombre AS estado, COALESCE(com.idCompra, 0) AS idCompra FROM venta AS ve JOIN estado AS es ON ve.estado = es.idEstado LEFT JOIN compra AS com ON ve.idVenta = com.fkVenta AND com.estado NOT IN(17);';
                    operations.executeQuery(sql, [], (result) => {
                        resolve(result);
                    });
                });
                res.send({data_art: data_art, data_sale:data_sale});
            break;
            case 2: //TRAE LAS IMAGENES E INFORMACIÃ“N DEL ARTICULO EN CONSIGNACION.
                var idArt =req.body.id_art;
                var idEmp =req.body.id_emp;
                var data_img = await new Promise((resolve, reject) => {
                    sql = 'SELECT Imagen FROM imagen WHERE idArticulo = ?';
                    operations.executeQuery(sql, [idArt], (result) => {
                        resolve(result);
                    });
                });

                var data_emp = await new Promise((resolve, reject) => {
                    sql = 'SELECT em.valorEmpeo AS inversion, em.cuotas, cu.interes + 1 as interes, (SELECT COUNT(pa.idPago) FROM pago AS pa WHERE pa.fkEmpeno = em.idEmpeno AND pa.fkEstadoPago = 19) AS pagadas FROM empeno AS em JOIN cuota AS cu ON cu.idCuotas = em.fkcuota AND em.idEmpeno = ?;';
                    operations.executeQuery(sql, [idEmp], (result) => {
                        resolve(result);
                    });
                });

                data_emp[0].imagenes = data_img;
                data_emp[0].recuperacion = (((parseFloat(data_emp[0].inversion) * parseFloat(data_emp[0].interes)) / parseFloat(data_emp[0].cuotas)) * parseFloat(data_emp[0].pagadas)).toFixed(2);
                res.send(data_emp);
            break;
            case 3://CREA LA VENTA.
                var up_item;
                var data_form = req.body.data;
                var insert_new_sale = await new Promise((resolve, reject) => {
                    sql = 'INSERT INTO venta (fkArticulo, titulo, descripcion, fechaPublicacion, precio, estado) VALUES (?,?,?, NOW(),?,?);';
                    values = []
                    operations.executeQuery(sql, [data_form.id_art, data_form.titulo, data_form.descripcion, data_form.precio, 11], (result) => {
                        resolve(result.insertId);
                    });
                });
                if (insert_new_sale > 0) {
                        up_item = await new Promise((resolve, reject) => {
                        sql = 'UPDATE articulo SET fkEstadoArticulo = 5 WHERE idArticulo = ?;';
                        operations.executeQuery(sql, [data_form.id_art], (result) => {
                            resolve(result.affectedRows > 0);
                        });
                    });                      
                    res.send({check: up_item});
                }
                else{
                    res.send({error: "No se creo la venta"});
                }
            break;
            case 4://DATOS VENTA Y COMPRA
                var id_comp = req.body.id_comp; 
                var id_ven = req.body.id_ven;

                var data_compra = await new Promise((resolve, reject) => {
                    sql ='SELECT  pv.idPago, co.nit, pv.banco, tp.descripcion AS tipo_pago, pv.numeroDocumento, pv.ValorPagado AS monto, co.direccion FROM compra AS co JOIN pago_venta AS pv ON pv.fkCompra = co.idCompra JOIN tipopago AS tp ON tp.idTipoPago = pv.fkTipoPago WHERE co.estado NOT IN (17) AND pv.estado NOT IN (23) AND co.idCompra = ?;';
                    operations.executeQuery(sql, [id_comp], (result) => {
                        resolve(result);
                    });
                });

                var data_venta = await new Promise((resolve, reject) => {
                    sql ='SELECT titulo, descripcion, precio FROM venta WHERE idVenta = ?';
                    operations.executeQuery(sql, [id_ven], (result) => {
                        resolve(result);
                    });
                });
                res.send({data_compra:data_compra, data_venta:data_venta});
            break;
            case 5: //APROBAR COMPRA
                var id_comp = req.body.id_comp;
                var id_pago = req.body.id_pago
                var id_venta_articulo;
                var finish_venta;
                var finish_pago;
                var aprove_sale = await new Promise((resolve, reject) => {
                    sql ='UPDATE compra SET estado = 16, fechaCompra = NOW() WHERE idCompra = ?;';
                    operations.executeQuery(sql, [id_comp], (result) => {
                        resolve(result.affectedRows > 0);
                    });
                });

                //APROVAMOS LA VENTA
                if (aprove_sale) {
                    id_venta_articulo = await new Promise((resolve, reject) => {
                        sql ='SELECT co.fkVenta, ve.fkArticulo FROM compra AS co JOIN venta AS ve ON co.fkVenta = ve.idVenta WHERE idCompra = ?;';
                        operations.executeQuery(sql, [id_comp], (result) => {
                            resolve(result);
                        });
                    }); 
                }
                if (id_venta_articulo.length > 0) {
                    //FINALIZAMOS LA VENTA
                    finish_venta = await new Promise((resolve, reject) => {
                        sql ='UPDATE venta SET estado = 12 WHERE idVenta = ?;';
                        operations.executeQuery(sql, [id_venta_articulo[0].fkVenta], (result) => {
                            resolve(result.affectedRows > 0);
                        });
                    });
                    
                    //APROVAMOS EL PAGO. 
                    finish_pago = await new Promise((resolve, reject) => {
                        console.log(id_pago);
                        sql ='UPDATE pago_venta SET estado = 22 WHERE  idPago = ?;';
                        operations.executeQuery(sql, [id_pago], (result) => {
                            resolve(result.affectedRows > 0);
                        });
                    });
                    
                    //DAMOS POR VENDIDO EL ARTICULO.
                    finish_articulo = await new Promise((resolve, reject) => {
                        sql ='UPDATE articulo SET fkEstadoArticulo = 8 WHERE  idArticulo = ?;';
                        operations.executeQuery(sql, [id_venta_articulo[0].fkArticulo], (result) => {
                            resolve(result.affectedRows > 0);
                        });
                    });
                    res.send({check: (finish_venta && finish_articulo && finish_pago)});
                }else{
                    res.send({check: false});
                }
            break;
            case 6: //EDITAR VENTA
                var dataForm = req.body.dataForm;
                var edit_sale = await new Promise((resolve, reject) => {
                    sql ='UPDATE venta SET titulo =?, descripcion = ?, precio = ? WHERE idVenta = ?;';
                    values = [dataForm.titulo, dataForm.descripcion, dataForm.precio, dataForm.id_ven];
                    operations.executeQuery(sql, values, (result) => {
                        resolve(result.affectedRows > 0);
                    });
                });
                res.send({check: edit_sale});
            break;
            case 7: //ELIMINAR VENTA
                var id_sale = req.body.id_sale;
                var id_item, up_item = false;
                var delete_sale = await new Promise((resolve, reject) => {
                    sql ='UPDATE venta SET estado = 13 WHERE idVenta = ?;';
                    operations.executeQuery(sql, [id_sale], (result) => {
                        resolve(result.affectedRows > 0);
                    });
                });

                //TRAEMOS EL ID DEL ARTICULO.
                if (delete_sale) {
                    id_item = await new Promise((resolve, reject) => {
                        sql ='SELECT fkArticulo FROM venta WHERE idVenta = ?;';
                        operations.executeQuery(sql, [id_sale], (result) => {
                            resolve(result[0].fkArticulo);
                        });
                    }); 
                }

                //REGRESAMOS EL ARITUCLO A CONSIGNADO.
                if (id_item > 0) {
                    up_item = await new Promise((resolve, reject) => {
                        sql ='UPDATE articulo SET fkEstadoArticulo = 4 WHERE idArticulo = ?;';
                        operations.executeQuery(sql, [id_item], (result) => {
                            resolve(result.affectedRows > 0);
                        });
                    }); 
                }
                res.send({check: up_item});
            break;

            case 8:
                var data_rv = req.body;
                var reject_payment;
                var published_sale;
                var decline_request  = await new Promise((resolve, reject) => {
                    sql ='UPDATE compra SET comentario = ?, estado = ? WHERE idCompra = ?;';
                    operations.executeQuery(sql, [data_rv.comentario, 17, data_rv.id_compra], (result) => {
                        resolve(result.affectedRows > 0);
                    });
                });
                
                if (decline_request) {
                    reject_payment  = await new Promise((resolve, reject) => {
                        sql ='UPDATE pago_venta SET estado = ? WHERE  idPago = ?;';
                        operations.executeQuery(sql, [23, data_rv.id_pago], (result) => {
                            resolve(result.affectedRows > 0);
                        });
                    });
                }

                if (reject_payment) {
                    published_sale  = await new Promise((resolve, reject) => {
                        sql ='UPDATE venta SET estado = ? WHERE idVenta = ?;';
                        operations.executeQuery(sql, [11, data_rv.id_ven], (result) => {
                            resolve(result.affectedRows > 0);
                        });
                    });
                }

                res.send({check: published_sale});
            break;
        }
    }
});