const session = require('express-session');
const express = require('express');
const operations = require('../operations');
const router = express.Router()
module.exports = router

router.post('/', async (req, res) => {

    let body = req.body;
    usuario = req.session.user;

    if(usuario) {
        
        switch (parseInt(body.op) ) {
            case 1:
                res.setHeader('Content-Type', 'application/json');
                var registros = await new Promise((resolve , reject) => {
            
                    sql = `select * from EmpenosPostulados;`
                    operations.executeQuery(sql,null,(result) => {
                        resolve(result);
                    })
            
                })
            
                for (const registro of registros) {
                    registro.imagenes = []; 
            
                    registro.imagenes = await new Promise((resolve , reject) => {
            
                        sql = `SELECT * from imagen WHERE idArticulo = ?;`
                        operations.executeQuery(sql,registro.idArticulo,(result) => {
                            resolve(result);
                        })
                
                    })
            
                }
            
                
            
            
            
                res.send(registros);
                
                break;
            case 2:

            let tipo = req.body.tipo;

            res.setHeader('Content-Type', 'application/json');
            var registros = await new Promise((resolve , reject) => {
        
                sql = `select * from infoempenopostulado where idEmpeno = ? `
                operations.executeQuery(sql,tipo,(result) => {
                    resolve(result);
                })
        
            });
        
            for (const registro of registros) {
                registro.imagenes = []; 
        
                registro.imagenes = await new Promise((resolve , reject) => {
        
                    sql = `SELECT * from imagen WHERE idArticulo = ?;`
                    operations.executeQuery(sql,registro.idArticulo,(result) => {
                        resolve(result);
                    })
            
                })
        
            }
            res.send(registros);
                
                break;
            case 3:

            res.setHeader('Content-Type', 'application/json');

            let tipo2 = req.body.tipo;

            const datos = await new Promise((resolve , reject) => {
        
                sql = `select * from renegociarempeno where idEmpeno = ? `
                operations.executeQuery(sql,tipo2,(result) => {
                    resolve(result);
                })
            });
                

            const tipos_cuotas = await new Promise((resolve, reject) => {
                sql = "SELECT * FROM cuota";
                operations.executeQuery(sql, values, (result) =>{ 
                    resolve(result);
                });
            });
        
            res.send({empR: datos , tc:tipos_cuotas});

                
                break;


            case 4 : 

            let objeto = req.body.objeto;

            res.setHeader('Content-Type', 'application/json');

            try {
                
                var update = await new Promise((resolve , reject) => {
            
                    sql = ` update empeno set fkcuota = ${ parseInt(objeto.fkCuota) } , fkestadoEmpeno = ${ parseInt(objeto.fkEstado) } , valorEmpeo = ${ parseFloat(objeto.valorEmpeo) } , cuotas = ${ parseInt(objeto.cuotas) } 
                    where idEmpeno = ? `
                    operations.executeQuery(sql, parseInt(objeto.idEmpeno) ,(result) => {
                        if(result) {
                            resolve(true);
                        } else {
                            resolve(false);
                        }
                    })
            
                });
                
                res.send(update);
            } catch (error) 
            {
                res.status(500).send(false);    
            }
                break;



            case 5 :

            let tipo5 = req.body.tipo;

            res.setHeader('Content-Type', 'application/json');

            try {
                
                var update = await new Promise((resolve , reject) => {
            
                    sql = ` update empeno set fkestadoEmpeno = ${ 9 } where idEmpeno = ? `
                    operations.executeQuery(sql, parseInt(tipo5)  ,(result) => {
                        if(result) {
                            resolve(true);
                        } else {
                            resolve(false);
                        }
                    })
            
                });
                
                res.send(update);
            } catch (error) 
            {
                res.status(500).send(false);    
            }
                break;


            case 6 :

            let objeto2 = req.body.objeto;

            res.setHeader('Content-Type', 'application/json');

            
            
            try {
                
                let AceptEmpeno = await new Promise((resolve , reject) => {
            
                    sql = `update empeno set fkestadoEmpeno = ${ parseInt(objeto2.estado) } , valorEmpeo = ${ parseFloat(objeto2.valor) } , cuotas = ${ parseInt(objeto2.cuotas) } where idEmpeno = ? `
                    operations.executeQuery(sql, parseInt(objeto2.idEmpeno)  ,(result) => {
                        if(result) {
                            resolve(true);
                        } else {
                            resolve(false);
                        }
                    })
            
                });

                
                let cargarPagos = await new Promise((resolve , reject) => {
            
                    sql = `CALL InsertarConIntervalo( ${parseInt(objeto2.idEmpeno)} , ${ parseInt(objeto2.cuotas) })`
                    operations.executeQuery(sql, parseInt(objeto2.idEmpeno)  ,(result) => {
                        if(result) {
                            resolve(true);
                        } else {
                            resolve(false);
                        }
                    })
            
                });

                res.send( {cargarPagos,AceptEmpeno} );
                
                
            } catch (error) 
            {
                res.status(500).send(false);    
            }
                break;
        
            default:
                break;
        }

    }

});
