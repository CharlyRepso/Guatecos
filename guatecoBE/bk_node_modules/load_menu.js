const operations = require('../operations');
const express = require('express');
const router = express.Router();

router.post('/', (req, res) => {
    var usuario;
    var key = req.body;
    var permiso;
    var btn_sing_out;
    var info_user;

    //VERIFICAMOS SI EXISTE UN USUARIO AUTENTICADO
    if (req.session.user) {
        //OBETENMOS LOS DATOS DE LA SESIÃ“N
        var id_pagina;
        usuario = req.session.user;
        permiso = usuario.rol
        user_name = usuario.usuario;
        
        switch (permiso) {
            case 2:id_pagina = 15;break;
            case 3:id_pagina = 16;break;
            default:
                break;
        }

        btn_sing_out = `<a href="#" class="nav_link" id="btn_log_out" page="0"> <i class='bx bx-log-out'></i> <span class="nav_name">Cerrar Sesion</span></a>`;
        info_user = `<div class="input-group mb-3">
        <button class="btn btn-dark" type="button" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Configurar Cuenta" id="btn_config_account" page="${id_pagina}"><i class='bx-sm bx bxs-user-circle'></i></button>
        <span class="input-group-text">${user_name}</span>
        <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false"><i class='bx bxs-bell'></i></i></button>
        <ul class="dropdown-menu dropdown-menu-end" id="notificaciones">
        </ul>
      </div>`
    }
    else{
        //SI NO EXISTE SESION CREADA SE MANDA UN CAMPO POR DEFECTO.
        permiso = 1;
        btn_sing_out = "";
        info_user = "";
    }
    switch (parseInt(key.op)) {
        case 1://CARGAMOS LOS MENUS SEGUN LOS USUARIOS
            values = [permiso, 1];
            sql = `SELECT P.idPagina AS IDPAGINA, P.descripcion AS DESCRIPCION, P.icono AS ICONO FROM Pagina AS P JOIN Menu AS M ON P.fkMenu = P.fkMenu JOIN asignarPermiso AS AP ON AP.fkMenu = M.idMenu AND P.fkMenu = AP.fkMenu WHERE AP.fkTipoUsuario = ? AND M.estado = 1 AND P.estado = 1`;
            operations.executeQuery(sql, values, (result) =>{ 
                res.setHeader('Content-Type', 'application/json');
                var result_ = {
                    pages: result,
                    btn_log_out: btn_sing_out,
                    info_user: info_user
                }
                res.send(JSON.stringify(result_));
            }); 
        break;
        case 2: //SOLICITAR LA PAGINA DE ACCESO.
            values = [permiso, key.id];
            sql = `SELECT P.path AS PATH FROM Pagina AS P JOIN asignarPermiso AS AP ON P.fkMenu = AP.fkMenu JOIN tipoUsuario AS TU ON TU.idTipoUsuario = AP.fkTipoUsuario JOIN Menu AS M ON M.idMenu = AP.fkTipoUsuario AND M.idMenu = P.fkMenu WHERE AP.fkTipoUsuario = ? AND P.idPagina = ?;`;
            operations.executeQuery(sql, values, (result) =>{
                //SI LA CONSULTA DEVUELVE EN SU DEFECTO 0 ENONCES EL USUAIO NO TIENE ACCESSOS AL AREA.
                if (result.length == 1) {
                    res.setHeader('Content-Type', 'text/plain');
                    res.send(result[0].PATH);
                }
                //EN CASO DE QUE DEVUELVA 0 ESTE DEVOLVERA LA RUTA A LA PAGINA PRINCIAL.
                else{
                    res.send('dashboard.html');
                }
            });
        break; 
    }
});
    
module.exports = router;