const operations = require('../operations');
const autenticacion = require('./sesssionManager');
const express = require('express');
const bcrypt = require('bcryptjs');
const router = express.Router();

module.exports = router;

router.post('/', async (req, res) => {

    res.setHeader('Content-Type', 'application/json');
    var user = req.body;
    var registro = false;
    const userName = await new Promise((resolve, reject) => {
        values = [user.username];
        sql = `SELECT userName, correo FROM usuario WHERE userName = ?;`;
        operations.executeQuery(sql, values, (result) => {
            resolve(result.length > 0);
        });
    });

    const email = await new Promise((resolve, reject) => {
        values = [user.email];
        sql = `SELECT userName, correo FROM usuario WHERE correo = ?;`;
        operations.executeQuery(sql, values, (result) => {
            resolve(result.length > 0);
        });
    });


    if (!userName && !email) {
        registro = await new Promise((resolve, reject) => {
            const plaintextPassword = user.password;
            // Generar un salt (un valor aleatorio)
            const passwordSalt = bcrypt.genSaltSync(10);
            // Hash de la contraseÃ±a con el salt
            const passwordHash = bcrypt.hashSync(plaintextPassword, passwordSalt);
            
            values = [user.firstName, user.lastName, user.username, passwordHash, user.email, user.phone, user.address, 2];
            sql = `INSERT INTO usuario (nombre, apellido, userName, passwordHash, correo, telefono, direccion, fkTipoUsuario) VALUES(?,?,?,?,?,?,?,?);`;
            operations.executeQuery(sql, values, (result) => {
                resolve(true);
            });
        });
    }

    var result = {
        userName: userName,
        email: email,
        registro: registro
    }
    res.send(JSON.stringify(result));
});