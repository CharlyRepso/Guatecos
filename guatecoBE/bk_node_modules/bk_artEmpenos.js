const session = require('express-session');
const express = require('express');
const operations = require('../operations');
const router = express.Router()
module.exports = router

router.post('/', async (req, res) => {

    let body = req.body;
    usuario = req.session.user;

    if(usuario) {

        switch ( parseInt(body.op) ) {
            case 1:
                res.setHeader('Content-Type', 'application/json');

            const update_exp = await new Promise((resolve, reject) => {
                operations.executeQuery(" UPDATE pago SET fkEstadoPago = 20 WHERE DATE(NOW()) > fechaVencimiento AND fkEstadoPago NOT IN(19, 20)", [], (result) => {
                    resolve(result.affectedRows > 0);
                });
            });

            var registros = await new Promise((resolve , reject) => {
                sql = `select * from ArticulosEmpenados;`
                operations.executeQuery(sql,null,(result) => {
                    resolve(result);
                })
        
            })

        
            for (const registro of registros) {
                registro.imagenes = []; 
        
                registro.imagenes = await new Promise((resolve , reject) => {
        
                    sql = `SELECT * from imagen WHERE idArticulo = ?;`
                    operations.executeQuery(sql,registro.idArticulo,(result) => {
                        resolve(result);
                    })
            
                })
        
            }
            res.send(registros);
                
                break;
            case 2:

            let tipo = req.body.tipo;

            res.setHeader('Content-Type', 'application/json');
            var registros = await new Promise((resolve , reject) => {
        
                sql = `select * from ArticulosEmpenados where idEmpeno = ? ;`
                operations.executeQuery(sql,parseInt(tipo),(result) => {
                    resolve(result);
                })
        
            })
        
            for (const registro of registros) {
                registro.imagenes = []; 
        
                registro.imagenes = await new Promise((resolve , reject) => {
        
                    sql = `SELECT * from imagen WHERE idArticulo = ?;`
                    operations.executeQuery(sql,registro.idArticulo,(result) => {
                        resolve(result);
                    })
            
                })
        
            }
            res.send(registros);

                
                break;

            case 3:

            let idEmpeno = req.body.idEmpeno;

            res.setHeader('Content-Type', 'application/json');

            try {
                
                var update = await new Promise((resolve , reject) => {
            
                    sql = ` update empeno set fkestadoEmpeno = ${ 25 } where idEmpeno = ? `
                    operations.executeQuery(sql, parseInt(idEmpeno)  ,(result) => {
                        if(result) {
                            resolve(true);
                        } else {
                            resolve(false);
                        }
                    })
            
                });
                
                res.send(update);
            } catch (error) 
            {
                res.status(500).send(false);    
            }
                
                break;
            case 4:
                
                break;
            case 5:
                
                break;
        
            default:
                break;
        }

    }

});