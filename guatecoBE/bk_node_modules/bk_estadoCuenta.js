const session = require('express-session');
const express = require('express');
const operations = require('../operations');
const router = express.Router()
module.exports = router

router.post('/', async (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    user = req.session.user;
    var op = req.body.op;

    switch (parseInt(op)) {
        case 1:
            const values = [parseInt(user.id)];
            const update = await new Promise((resolve, reject) => {
                operations.executeQuery(" UPDATE pago SET fkEstadoPago = 20 WHERE DATE(NOW()) > fechaVencimiento AND fkEstadoPago NOT IN(19, 20) AND fkEmpeno IN (SELECT idEmpeno FROM empeno WHERE fkUsuario = ?);", [parseInt(user.id)], (result) => {
                    resolve(result.affectedRows > 0);
                });
            });
            
            var sql = 'select * from consultaPago where fkUsuario = ?;';

            const data = await new Promise((resolve, reject) => {
                operations.executeQuery(sql, values, (result) => {
                    resolve(result);
                });
            });

            res.send(JSON.stringify(data));

            break;
        case 2:
            res.setHeader('Content-Type', 'application/json');
            var dataPago = req.body;
            const values2 = [dataPago.numeroDocumento, dataPago.idPago];
            var sql2 = 'UPDATE pago SET fkEstadoPago = 19, fechaPago = NOW(), numeroDocumento = ? WHERE idPago = ?;';

            const pago = await new Promise((resolve, reject) => {
                operations.executeQuery(sql2, values2, (result) => {
                    resolve(result);
                });
            });
            res.send(JSON.stringify(pago));
            break;
        default:
            break;
    }
});
