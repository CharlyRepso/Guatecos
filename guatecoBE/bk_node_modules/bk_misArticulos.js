const session = require('express-session');
const express = require('express');
const operations = require('../operations');
const router = express.Router()
module.exports = router

router.post('/', async (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    user = req.session.user;
    var op = req.body.op;

    switch (parseInt(op)) {
        case 1:
            const values = [1, 2, 3, 9, 25, user.id];
            const data = await new Promise((resolve, reject) => {
                //sql = 'SELECT em.idEmpeno, ar.idArticulo, em.cuotas AS cuotasEmpeno, em.valorEmpeo AS valorNegociacion, ar.cuotas, c.interes, c.meses, ar.valor, ar.fkEstadoArticulo, em.fkEstadoEmpeno, em.titulo, em.descripcion, ta.descripcion AS tipo FROM empeno AS em JOIN articulo AS ar ON em.fkArticulo = ar.idArticulo JOIN tipoarticulo AS ta ON ta.idTipoArticulo = ar.fkTipoArticulo JOIN Usuario AS u ON em.fkUsuario = u.idUser JOIN Cuota As c ON ar.fkCuota = c.idCuotas WHERE em.fkEstadoEmpeno IN (?,?,?,?) AND u.idUser = ?;';
                sql = 'SELECT em.idEmpeno, ar.idArticulo, em.cuotas AS cuotasEmpeno, cem.interes AS interesEmpeno, em.valorEmpeo AS valorNegociacion, ar.cuotas AS cuotasArticulo, c.interes AS interesArticulo, c.meses AS mesesArticulo, ar.valor, ar.fkEstadoArticulo, em.fkEstadoEmpeno, em.titulo, em.descripcion, em.fkcuota AS idCuotaEmp, ta.descripcion AS tipo FROM empeno AS em JOIN articulo AS ar ON em.fkArticulo = ar.idArticulo JOIN tipoarticulo AS ta ON ta.idTipoArticulo = ar.fkTipoArticulo JOIN Usuario AS u ON em.fkUsuario = u.idUser JOIN Cuota As cem ON em.fkCuota = cem.idCuotas  JOIN Cuota As c ON ar.fkCuota = c.idCuotas WHERE em.fkEstadoEmpeno IN (?,?,?,?,?) AND u.idUser = ?;';
            
                operations.executeQuery(sql, values, (result) => {
                    resolve(result);
                });
            });

            const images = await new Promise((resolve, reject) => {
                sql = 'Select imagen.imagen from articulo, empeno, imagen where articulo.idArticulo = imagen.idArticulo and articulo.fkEstadoArticulo IN (?,?,?,?) AND empeno.fkUsuario = ?;';
                operations.executeQuery(sql, values, (result) => {
                    resolve(result);
                })
            })

            var result = {
                data: data,
                images: images
            }
            res.send(JSON.stringify(result));
            break;
        case 2:

            const values2 = [user.id];
            res.setHeader('Content-Type', 'application/json');

            const compras = await new Promise((resolve, reject) => {
                sql = 'SELECT c.idCompra AS idCompra, v.idVenta AS idVenta, v.titulo AS titulo, v.descripcion AS descripcion, c.comentario, es.nombre AS estado_compra, ep.nombre AS estado_pago FROM venta v JOIN compra c ON c.fkVenta = v.idVenta JOIN estado es ON es.idEstado = c.estado LEFT JOIN pago_venta p ON p.fkCompra = c.idCompra LEFT JOIN estado ep ON ep.idEstado = p.estado JOIN usuario AS u ON u.idUser = c.fkUsuario AND c.fkUsuario = ?;';
                operations.executeQuery(sql, values2, (result) => {
                    resolve(result);
                })
            })
            res.send(JSON.stringify(compras));
            //console.log(compras);
            break;

        case 3:
            var data_empeno = req.body.data;
            const values3 = [data_empeno.id_emp, data_empeno.cuotas_Empeno];
            res.setHeader('Content-Type', 'application/json');

            var sql_1 = "CALL InsertarConIntervalo(?, ?);";

            const newEmpeno = await new Promise((resolve, reject) => {
                operations.executeQuery(sql_1, values3, (result) => {
                    resolve(result);
                });
            });

            const values4 = [3, data_empeno.id_emp];
            var sql_2 = "UPDATE empeno SET fkEstadoEmpeno = ? WHERE idEmpeno = ?;";

            const updateEmpeno = await new Promise((resolve, reject) => {
                operations.executeQuery(sql_2, values4, (result) => {
                    resolve(result);
                });
            });

            var result2 = {
                updateEmpeno: updateEmpeno,
                newEmpeno: newEmpeno
            }

            res.send(JSON.stringify(result2));

            break;

        case 4:

            var data_empeno = req.body.data;
            const values5 = [9, data_empeno.id_emp];
            res.setHeader('Content-Type', 'application/json');

            var sql_3 = "UPDATE empeno SET fkEstadoEmpeno = ? WHERE idEmpeno = ?;";

            const rejectEmpeno = await new Promise((resolve, reject) => {
                operations.executeQuery(sql_3, values5, (result) => {
                    resolve(result);
                });
            });

            res.send(JSON.stringify(rejectEmpeno));


            break;
        default:
            break;
    }

});
