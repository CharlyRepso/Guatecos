const session = require('express-session');
const express = require('express');
const operations = require('../operations');
const router = express.Router()
module.exports = router

router.post('/', async (req, res) => {
    let body = req.body;
    usuario = req.session.user;
    if (usuario) {
        switch (parseInt(body.op)) {
            case 1:
                res.setHeader('Content-Type', 'application/json');
                var ventas = await new Promise((resolve, reject) => {
                    let sql = "SELECT a.idArticulo, v.idVenta, v.titulo, v.descripcion, v.precio FROM venta AS v JOIN articulo AS a ON a.idArticulo = v.fkArticulo WHERE v.estado = 11;";
                    operations.executeQuery(sql, [], (result) => {
                        resolve(result);
                    });
                });
            
                for (let index = 0; index < ventas.length; index++) {
                    const element = ventas[index].idArticulo;
                    
                    var imagenes = await new Promise((resolve, reject) => {
                        let sql = "SELECT imagen FROM imagen WHERE idArticulo = ?;";
                        operations.executeQuery(sql, [element], (result) => {
                            let img = [];
                            result.forEach(element => {
                                img.push(element.imagen);
                            });
                            resolve(img);
                        });
                    });
            
                    ventas[index].imagenes = imagenes;
                }
            
                res.send(ventas);
            break;
            case 2:
                res.setHeader('Content-Type', 'application/json');
                    var sql_1 = "INSERT INTO compra (fkUsuario, fkVenta, nit, direccion, estado) VALUES (?,?,?,?,?);";
                    var values_1 = [usuario.id, body.id_sale, body.nit, body.direccion, 15];
                    
                    const new_sale = await new Promise((resolve, reject) => { 
                        operations.executeQuery(sql_1, values_1, (result) => {
                            resolve(result.insertId);
                        });
                    })
                    
                    
                    if (new_sale > 0) {
                        var new_pay_sale = await new Promise((resolve, reject) => { 
                            var sql_2 = "INSERT INTO pago_venta (fkCompra, fkTipoPago, banco, numeroDocumento, ValorPagado, estado) VALUES (?,?,?,?,?,?);";
                            var values_2 = [new_sale, body.tipo_pago, body.banco, body.numDoc, body.valPagado, 24]; 
                            operations.executeQuery(sql_2, values_2, (result) => {
                                resolve(result.affectedRows);
                            });
                        })
                    }

                    if (new_pay_sale > 0) {
                        var sale_resev = await new Promise((resolve, reject) => { 
                            var sql = "UPDATE venta SET estado = ? WHERE idVenta = ?;";
                            var values = [14, body.id_sale];
                            operations.executeQuery(sql, values, (result) => {
                                resolve(result.affectedRows);
                            });
                        })
                    }
                    
                    res.send(sale_resev > 0 ? {result:true} : {result: false});
            break;
        }   
    }
});