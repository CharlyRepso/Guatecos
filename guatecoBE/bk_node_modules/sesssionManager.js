const session = require('express-session');
const express = require('express');
const operations = require('../operations');
const router = express.Router();
const app = express();

router.post('/', async (req, res) => {
  const key = req.body;
  switch (parseInt(key.op)) {
    case 1:
        res.setHeader('Content-Type', 'text/plain');
        const result = await log_in(key.user, key.password, req.session);
        res.send(result);
    break;
    case 2:
      sing_off(req.session);
    break;
    case 3:
      var data_re = key.dataRecovery;
      const result_re = await recovery(data_re.userName, data_re.email);
      res.send(result_re);
    break;
  }
});


async function log_in(user, password, session_) {
  var USER_ID;
  var USER_NAME;
  var USER_ROL;


  const login_start = await new Promise((resolve, reject) => {
    // VALIDA LAS CREDENCIALES DEL USUARIO
    const sql_password = 'SELECT idUser AS USER_ID, estado, passwordHash AS PASSWORD_HASH FROM usuario WHERE userName = ?'; 
    const user_name = [user];
    operations.executeQuery(sql_password, user_name, (result) => {
      if (result.length == 1) {
        const PASSWORD_HASH = result[0].PASSWORD_HASH;
        USER_ID = result[0].USER_ID;
        const passwordMatch = operations.bcrypt.compareSync(password, PASSWORD_HASH);
        if (result[0].estado == 0) {
          resolve(false);
        }
        else{
          resolve(passwordMatch);
        }
      }
      else{
        resolve(false);
      }
    });
  });

  if (login_start && USER_ID != null) {
    const sql_data = 'SELECT fkTipoUsuario AS USER_ROL, userName AS USER_NAME FROM usuario WHERE idUser = ?';
    // DATOS DEL USUARIO*/
    const session_start = await new Promise((resolve, reject) => {
      values = [USER_ID];
      operations.executeQuery(sql_data, values, (result) => {
        USER_NAME = result[0].USER_NAME;
        USER_ROL = result[0].USER_ROL;
        const datosDeSesion = {
          usuario: USER_NAME,
          id: USER_ID,
          rol: USER_ROL,
        };
        session_.user = datosDeSesion;
        resolve(true);
      });
    });
    return session_start;
  }
  else{
    return false;
  }
}



function sing_off(session_) {
  session_.destroy();
}


module.exports ={
  router: router,
  session: session
};

async function recovery(userName, email) {
    var resquest = {active: false, recovery: false, found: false, check: false};
    var active_recovery = false;
    var data_user  = await new Promise((resolve, reject) => {
      sql ='SELECT idUser, recuperar, estado FROM usuario WHERE userName = ? AND correo = ?;';
      operations.executeQuery(sql, [userName, email], (result) => {
          resolve(result);
      });
    });

    if(data_user.length > 0){
      resquest.found = true;
      if (data_user[0].recuperar == 0 && data_user[0].estado == 1) {
        active_recovery = await new Promise((resolve, reject) => {
          sql ='UPDATE usuario SET recuperar = ? WHERE  idUser = ?;';
          operations.executeQuery(sql, [true, data_user[0].idUser], (result) => {
              resquest.active = true; 
              resolve(result.affectedRows > 0);
          });
        });
      }
      else{
        resquest.recovery = data_user[0].recuperar == 1; resquest.active = data_user[0].estado == 1;
      }
    }
    resquest.check = active_recovery;

    return resquest;
}